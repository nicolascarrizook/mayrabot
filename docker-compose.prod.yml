version: '3.9'

services:
  # FastAPI Backend Service
  api:
    build: .
    container_name: nutrition_bot_api
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 4
    expose:
      - "8000"
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./generated_pdfs:/app/generated_pdfs
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env.prod
    networks:
      - nutrition_network
    depends_on:
      - redis
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Telegram Bot Service
  telegram_bot:
    build: .
    container_name: nutrition_telegram_bot
    command: python telegram_bot/bot.py
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - API_BASE_URL=http://api:8000
    env_file:
      - .env.prod
    networks:
      - nutrition_network
    depends_on:
      - api
      - redis
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Service (for caching)
  redis:
    image: redis:7-alpine
    container_name: nutrition_bot_redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - nutrition_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nutrition_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - nutrition_network
    depends_on:
      - api
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: nutrition_bot_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  nutrition_network:
    driver: bridge

volumes:
  redis_data: